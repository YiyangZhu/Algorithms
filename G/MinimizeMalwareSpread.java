package G;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class MinimizeMalwareSpread {
    public static int minMalwareSpread(int[][] graph, int[] initial) {
        if (graph == null || graph.length == 0 || graph[0].length == 0 || initial == null || initial.length == 0) {
            return -1;
        }
        Arrays.sort(initial);
        Set<Integer> mals = new HashSet<>();
        for (int i : initial) {
            mals.add(i);
        }

        int max = 0;
        int result = initial[0];

        for (int i : initial){
            boolean[] containsOtherMal = new boolean[1];
            Set<Integer> visited = new HashSet<>();
            int count =dfs(i,i,graph,visited,containsOtherMal,mals);
            if(containsOtherMal[0]){
                continue;
            }
            if(count > max){
                max = count;
                result = i;
            }
        }

        return result;
    }

    public static int dfs(int start, int initialStart, int[][] graph, Set<Integer> visited, boolean[] containsOtherMal, Set<Integer> mals) {
        if(visited.contains(start) || containsOtherMal[0]){
            return 0;
        }

        int result = 1;
        visited.add(start);
        for(int i = 0; i < graph[start].length; i++){
            if(graph[start][i] == 1){
                if(initialStart != i && mals.contains(i)){
                    containsOtherMal[0] = true;
                    break;
                }
                result += dfs(i,initialStart,graph,visited,containsOtherMal,mals);
            }
        }
        return result;

    }
}
